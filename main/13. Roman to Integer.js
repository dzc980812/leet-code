/** 
 * 13. 罗马数字转整数
 * 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。
 *  字符          数值
    I             1
    V             5
    X             10
    L             50
    C             100
    D             500
    M             1000
    例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

    通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

    I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
    X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
    C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
    给定一个罗马数字，将其转换成整数。
 
 * @param {string} s
 * @return {number}
 */

/**
 * 
 * 首先给定一个对象作为匹配项，
 * 如果当前项小于下一项，总数减少当前项的匹配值，否则总数加上当前项的匹配值
 * 如 IV，I为1，V为5，总数为0，
 * 第一次循环，当前项为1，下一项为5
 * 1 < 5  所以 总数等于 0 - 1 = -1；
 * 接着第二次循环5没有下一项 总数等于 -1 + 5 = 4
 * 
 */
var romanToInt = function (s) {
  // 已知匹配项
  const obj = {
    I: 1,
    V: 5,
    L: 50,
    X: 10,
    C: 100,
    D: 500,
    M: 1000
  }

  let number = 0
  for (let i = 0; i < s.length; i++) {
    // 循环匹配，如果当前项小于下一项，总数减少当前项
    // 当前项不小于下一项，总是增加当前项
    obj[s[i]] < obj[s[i + 1]] ? number -= obj[s[i]] : number += obj[s[i]]
  }
  return number
};

console.log(romanToInt('IV'));